
#include <iostream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <unistd.h>
#include <limits.h>
#include <algorithm>
#include "Sample.h"
#include "GodMachine.h"

//
// Non-Blocking GetLine:
//    Gets a line of characters from a stream, until it finds a delimiter or the timeout passes
//
void nb_getline(std::istream& in, std::string& str,
                char delim = '\n', unsigned timeout = 3) {
    std::stringstream ss;
    char c = 0;

    // Timeout needs to be incremented +1, 'cause 0 does not count
    if (timeout + 1 != 0) timeout++;

    // Read characters while we do not found delimiter or we run out of time
    while ( timeout > 0 && c != delim ) {
        // Get next character (instream should be non-blocking!)
        in.clear();
        in.get(c);

        if (!in.eof()) {
            // Next character found, put it in provisional stream
            if (c != delim) ss << c;
        } else if (ss.str().length() > 0) {
            // Found eof, and we are in the middle of the line
            while (in.eof() && ss.str().length() > 0 && timeout > 0) {
                // Sleep 1 millisecond and try again
                usleep(1000);
                in.clear();
                timeout--;
            }

        // Nothing ready to be read, let's exit
        } else break;
    }

    str = ss.str();
}

//Return the value of stock to buy or sell
double stockToTrade(double valorAccion, double cantidad_actual){
	return (cantidad_actual * 0.5)/valorAccion;
}

std::vector<std::string> loadThetas(){
	std::vector<std::string> thetas;
	thetas.push_back("24");
	thetas.push_back("-3.56226;1.27941;-4.39218;2.13116;-5.98857;-4.18524;-7.65489;-9.93342;-8.06794;8.14584;-8.29158;6.80101;4.44036;7.45823;-0.281533;-1.7167;5.55772;-6.559;-7.27134;4.25931;3.72811;-4.64903;-0.60862;7.44412;-6.6025");
	thetas.push_back("-5.47896;9.77258;-9.13965;1.72245;-5.61691;0.26827;4.54356;6.08291;4.12965;4.08108;-9.91136;-6.89868;9.4512;-5.00832;-4.60164;0.182318;-8.46169;4.11935;9.67539;2.95839;-3.36044;0.871916;4.53711;9.10687;-1.86446");
	thetas.push_back("-1.53262;-7.31064;-7.64816;7.99996;5.54347;5.28395;9.51268;0.0943605;-8.77705;5.25894;-8.10096;-8.60812;-2.1951;-7.70953;3.85409;-9.40938;-8.85528;6.57158;4.15331;-0.686831;-9.74912;-0.880126;-1.04807;9.31239;-2.48919");
	thetas.push_back("-6.01646;0.312608;-0.963282;-6.88712;4.60325;5.5043;3.92795;1.74924;6.30596;3.9329;8.57296;-3.96676;-8.92438;8.13484;0.161952;6.26181;3.17197;0.258019;-0.961238;2.91391;7.96766;7.87456;-4.84998;-2.10845;-2.79419");
	thetas.push_back("7.73371;3.11742;-1.89588;0.124404;8.62612;-9.47155;-9.53516;-7.44461;8.15344;5.11321;8.7784;5.03931;-2.96308;9.60989;9.97014;0.346804;-1.80776;4.44692;-7.57216;3.76958;8.84005;-2.44175;-4.57243;-9.16692;-4.29336");
	thetas.push_back("-1.55509;-2.52396;8.63892;7.51294;-5.82232;-1.14675;-8.61055;-0.756762;2.09666;-8.6292;-7.21995;5.07824;3.91748;-2.15979;0.384462;8.05888;8.27092;-1.41551;6.40543;-2.48618;9.9928;-6.00151;-5.86564;5.8862;-5.77781");
	thetas.push_back("-2.51941;-3.39942;0.668565;-1.88429;-4.16072;-4.2478;-1.35893;-7.4275;-9.56608;9.07592;9.66615;5.06839;-1.8703;-0.843355;-0.437377;-7.65735;-8.52875;-8.73353;9.6593;2.89592;-1.08857;-2.78253;2.12409;2.99799;6.37898");
	thetas.push_back("-0.96661;-6.423;-2.07649;1.7486;-4.82702;0.85203;-8.64649;1.87275;6.29027;1.55668;-4.7714;-5.15784;0.807743;-9.85509;3.39042;9.22337;4.66866;-2.08698;4.59848;-9.87537;2.05641;-4.47397;-9.90676;-2.58759;-3.87904");
	thetas.push_back("7.56729;5.63547;-2.96077;-1.57377;9.97367;1.36373;-3.85818;-1.60673;-5.80405;-8.85081;-5.75082;6.0204;-8.37816;-3.05082;-7.36067;2.99542;-4.28322;-4.78399;-4.08743;6.62305;6.11535;5.22407;-4.90982;-5.38574;0.968553");
	thetas.push_back("-9.30719;-3.93811;9.07462;0.922596;-6.58617;-6.87499;-4.7076;-3.65837;-0.313018;-2.58047;-1.10615;-8.48447;3.39481;-1.60495;0.608168;1.37369;5.41833;-1.28559;3.48803;-4.30788;7.48529;5.71205;3.09135;2.53081;9.87279");
	thetas.push_back("9.13958;-8.05469;4.34998;9.94798;4.73812;-6.88734;2.59864;5.3299;-1.2402;6.58809;3.16727;-9.18889;-4.05457;-0.285325;-7.97802;8.31434;5.38618;0.167942;6.8277;2.31605;-3.87454;-6.4039;-7.05548;-4.04514;-9.59227");
	thetas.push_back("-6.77692;-6.91805;3.65541;6.45052;-2.01333;-9.7597;-0.21244;6.26015;-4.97283;0.23783;-6.98103;4.54122;3.22178;1.43924;-1.94441;-3.68927;-4.06628;-9.27731;2.84406;1.04451;3.66466;-4.78422;7.44899;1.16146;1.70217");
	thetas.push_back("4.28673;-2.31092;-4.17354;2.3469;-3.47109;9.14418;4.09014;0.200513;-5.02884;-2.8267;-4.72694;9.73321;5.80001;6.2481;1.15373;-1.52091;5.78714;5.4042;-5.12544;4.70391;9.04445;9.33689;3.67221;-9.93235;-8.9896");
	thetas.push_back("-6.9264;-8.00728;7.76176;-8.41714;7.54972;-6.34291;3.12234;-4.54677;1.44257;6.1416;-5.60645;1.63079;8.27763;4.88485;-4.1246;-3.12943;-7.82641;2.88819;-5.09017;-9.13598;-0.222648;-8.16381;-7.4336;4.26042;6.66235");
	thetas.push_back("5.64689;-2.5314;-8.04735;-8.60506;5.11947;-2.69772;-0.689781;-5.15191;-0.757228;0.232602;3.5579;-4.1568;1.44272;8.74916;5.11676;2.81869;1.73431;-1.58044;2.60636;-2.0136;7.1564;5.55563;8.6197;-7.35977;-2.92999");
	thetas.push_back("8.07947;-6.60188;7.39644;-3.05402;7.54157;-8.96679;-4.53132;-2.01539;-8.19203;5.10989;-6.86942;5.27843;4.73076;3.58538;7.60115;4.29639;-8.78218;-0.166271;7.68425;0.624535;5.27781;-6.81346;2.75266;6.15075;-9.86574");
	thetas.push_back("4.27507;-1.45845;4.23897;-5.745;2.0266;-3.45248;-5.87651;-7.3822;2.51554;-6.41195;-8.11747;-5.61303;6.42536;-5.64217;-0.955078;4.48874;-8.41975;5.22597;-6.29573;1.01483;3.72425;0.999015;2.44972;7.58689;-8.59984");
	thetas.push_back("-8.71121;8.47104;5.03047;-7.15998;-7.4972;6.22689;5.16056;-8.9175;-0.746137;6.87699;6.00323;-5.56583;-2.84158;2.17629;-1.83062;3.76712;-5.1459;-8.3678;0.0967609;0.334541;-7.58399;-2.03534;7.19903;5.64699;3.65557");
	thetas.push_back("-9.22695;3.77706;-0.0963072;6.11264;7.36383;7.97448;-5.1472;8.88515;-1.59272;9.40187;3.32581;-0.305588;-6.99212;-9.47622;3.3107;6.25298;5.02741;4.84968;5.2483;6.54745;3.163;0.138894;3.58881;-7.0656;-6.47323");
	thetas.push_back("-2.4264;8.66623;-9.95068;4.13213;4.18785;8.73369;-9.08665;-0.725804;-5.44139;5.06758;-4.28868;8.14976;3.00968;9.19467;3.64083;9.79806;3.19486;5.1887;7.217;-7.06156;-3.82987;-5.75835;-8.18853;7.1995;-1.4689");
	thetas.push_back("-4.43591;5.26634;8.98776;6.66247;-0.629569;3.223;7.53142;8.56262;2.0733;0.620168;9.53507;6.39457;-0.0175457;-0.530969;-0.621853;5.17307;1.46336;-5.86182;-7.86606;-8.58975;6.67594;-8.4684;3.0418;9.36853;6.30128");
	thetas.push_back("4.15046;-4.73432;-7.44412;6.29674;6.8387;4.78689;-5.5911;0.227007;-2.89568;1.24298;-1.52359;-0.642293;5.83725;5.48666;-1.68913;-3.10911;9.7051;-0.131973;6.127;-2.04666;8.26275;7.21402;5.9077;4.0464;4.16055");
	thetas.push_back("4.26934;-2.37219;-8.97655;-5.27885;2.61675;-5.85938;-1.61393;-7.70719;-1.01107;-2.64654;-0.196203;-9.39836;-4.6254;6.345;-3.18665;-3.67861;0.193467;-9.76861;5.80059;0.752561;-1.52383;6.77104;-9.03786;7.50028;-5.32457");
	thetas.push_back("-4.61293;-0.0318834;-1.6037;-0.409767;-5.13792;1.40004;-9.96615;-7.66215;-3.54281;-0.840788;3.96442;-0.102569;-4.35615;-9.97451;1.72553;-2.77262;0.529372;-4.85628;4.77554;-8.41868;-4.47071;0.849622;-3.01779;7.09128;7.50441");
	thetas.push_back("-7.38442;-9.59203;-3.66893;8.44025;-9.6729;0.364252;5.51987;8.02996;-2.90615;-0.174223;-7.71916;4.5435;9.06184;9.09127;-4.32119;-8.84243;-3.5927;0.634257;-8.17526;7.44169;6.93281;4.47568;-3.2232;-2.22721;-2.66017");
	thetas.push_back("-1.25438;7.06547;0.0525843;-2.21086;4.8021;5.42347;-0.376178;0.491167;-3.13614;0.988135;3.2738;-4.67287;-2.6221;6.42012;9.83506;9.47223;-7.93631;1.65846;-9.84374;3.521;-0.321739;6.16747;4.08436;-5.61142;1.74412");
	thetas.push_back("-2.17764;1.545;4.13663;0.701685;1.41772;0.210081;-3.57068;1.02401;3.09798;9.59098;6.68931;7.12334;8.82842;-0.420736;-4.6397;3.9563;-7.76929;-4.42907;-1.98231;1.07471;5.97332;-2.15505;2.46146;-0.742889;9.47418");
	thetas.push_back("2.48509;1.88064;5.93894;1.26106;2.20564;4.06212;-9.41784;8.06851;-0.0758741;-2.80567;5.4411;6.55762;9.35493;9.09585;5.63333;-4.22503;0.415229;-0.984713;4.16455;-5.82309;-4.75242;2.8698;-1.80887;4.13665;-6.16782");
	thetas.push_back("-2.81857;0.321154;2.44867;-8.99224;-1.60349;-3.64201;-2.89803;-4.28273;6.03821;1.3806;-6.90957;-6.70043;0.0701783;-9.26403;3.93647;3.07519;3.4952;6.84829;-7.49193;-7.65197;-2.18762;-1.12812;3.43021;9.10126;0.244779");
	thetas.push_back("-2.5672;-2.565;-8.17335;1.68784;0.148525;7.35288;-6.98461;3.75943;2.76245;-8.04716;-5.48124;6.20658;6.59275;-4.31294;2.44278;-1.24134;-9.98033;1.60253;1.53905;-6.14234;4.89393;7.58475;1.65148;-4.63147;7.94998");
	thetas.push_back("1.13812;-6.97795;-9.9514;-9.07932;-6.1538;-1.97525;7.3605;-5.66477;9.46949;-0.129401;-2.65442;-3.80274;-2.26008;2.76701;-9.66179;2.48301;2.64803;8.44051;8.64847;-9.54321;-7.18541;9.30335;5.94283;9.71562;-2.0704");
	thetas.push_back("3.06838;-2.92277;2.85875;6.44887;-7.35918;2.19012;-6.92929;-4.38705;-8.99151;-3.47824;-2.01257;7.51589;4.73332;3.99445;1.77111;0.443581;3.5029;8.49233;-1.03025;-9.05689;7.55794;-9.25498;-6.58041;-9.37168;7.45169");
	thetas.push_back("-3.99255;-4.81023;6.47449;-6.57013;-8.94229;2.85222;-4.4918;-0.125464;9.89315;-3.48092;-9.06645;3.01624;-3.20148;2.01916;-3.86155;2.93645;8.6347;-8.0392;-9.73635;-9.16243;6.1965;-5.83238;-8.31517;-9.55817;5.92512");
	thetas.push_back("-3.808;-9.72434;8.81911;4.39442;-9.56857;-2.50359;3.61929;1.60704;0.435253;-1.95561;6.86392;8.19492;-6.5054;3.74033;-7.81535;3.07218;-6.77817;6.50244;-1.58765;-5.45588;-0.939158;6.83195;-8.72541;-8.81268;-5.86941");
	thetas.push_back("5.70031;0.65301;-9.83362;-3.04245;4.19226;-8.77884;-5.89921;-2.37442;-1.41917;-5.34381;-7.83295;0.551059;-3.12497;4.4318;0.195725;-2.7565;6.10067;-8.4697;8.40854;4.74916;2.01125;-2.85134;8.25115;3.2124;-0.112302");
	thetas.push_back("-0.526824;4.34175;6.20542;7.80964;-4.35356;-9.24299;7.99719;-3.90971;7.86146;1.52466;-9.40499;1.3979;-9.40959;3.52575;3.53235;-1.81751;5.94242;4.07356;-0.302888;4.54435;4.43858;1.23321;-9.5138;9.24292;6.09294");
	thetas.push_back("-8.20582;2.13919;-4.18257;-7.78141;0.810446;-9.17862;-0.149473;-2.12745;-3.52586;1.88266;4.54274;-4.83354;5.14874;4.39165;2.43675;-8.23481;7.97127;-6.78525;2.74116;-3.85947;8.41675;-2.43219;-3.43231;-7.60707;-5.0171");
	thetas.push_back("-0.0665434;-8.05787;-8.73176;6.02757;-6.01607;-7.07861;1.3889;8.55265;5.79424;-1.51841;0.464019;-0.912354;-5.61474;-7.42684;-1.3162;-2.59374;-4.05792;2.96285;-6.14847;3.7303;6.49905;-9.52173;7.5616;7.54192;8.64223");
	thetas.push_back("-6.35066;3.57229;8.78372;-0.867771;0.361892;-0.779668;-6.34349;-1.6163;-8.1432;0.0735579;-8.31162;1.20517;-0.348178;0.147534;9.75657;-6.44669;-0.203806;2.56725;0.0763269;-1.35433;1.49383;-7.92084;0.577295;-6.03936;7.8598");
	thetas.push_back("-5.89007;9.32623;-9.86778;0.654711;-5.34373;1.81897;5.75687;-9.15417;9.82252;-3.40855;6.49289;5.56551;2.33693;-8.54229;-9.12652;1.24697;2.37615;-3.90821;5.32927;-3.66218;0.819864;6.55544;-6.06513;-4.26494;3.86873");
	thetas.push_back("9.5692;1.27673;6.00904;6.25951;8.96686;-7.05661;7.03769;6.56198;-7.05916;8.75776;8.06087;-8.68455;-9.82156;-7.66054;-1.31164;2.21707;-4.7751;-4.67649;9.1479;-6.54519;-5.35384;-0.843648;9.14512;3.435;0.905935");
	thetas.push_back("8.60435;6.41073;-4.24622;5.8283;-6.86027;-2.74073;-5.49661;0.052164;-1.3348;7.85891;-5.58237;6.60877;4.79188;-6.29261;-8.5312;-5.07566;-5.73233;7.43155;0.0587045;9.42925;5.61033;5.16993;-8.92499;1.31509;-9.11361");
	thetas.push_back("8.72659;7.52501;-2.61402;-6.81018;2.19179;-4.99118;8.55155;6.90196;-8.94236;9.0856;-7.10478;-6.3107;9.48389;3.85479;-4.92724;-8.50198;-2.87851;2.30628;1.01054;6.87219;3.7515;-9.25993;3.55778;-3.81426;7.05092");
	thetas.push_back("1.07903;-5.89544;9.94192;6.95533;8.88815;0.763738;-3.47167;-4.19935;-4.59225;7.27459;8.92588;1.04497;1.00264;8.20129;2.84089;-3.97389;-0.586957;4.25382;-5.88208;-4.74181;7.22851;0.225488;-8.57879;8.76723;8.35097");
	thetas.push_back("-3.24881;9.61381;7.05205;-8.65713;-4.86262;-3.65095;-5.57186;0.529064;-1.12765;3.28213;4.71613;4.65678;7.45243;9.94994;-3.13487;7.59795;-4.84347;1.17193;-3.98955;5.95786;-6.05997;-6.73899;-9.64911;-5.97401;-7.36772");
	thetas.push_back("-8.63746;-4.00988;-9.52718;3.36785;-9.10643;7.05646;-5.99342;6.31101;-9.75371;-8.43093;0.709035;-2.02774;-0.243429;-2.76746;-4.18438;0.0801992;7.16885;0.702472;2.01312;8.91305;1.39427;6.10617;9.07575;-5.23782;-2.1724");
	thetas.push_back("1.80194;-2.96667;0.71043;6.20623;-5.5533;4.53734;3.52734;1.7358;1.69009;2.07466;2.92686;-4.22214;3.34181;-8.93774;-8.43939;-6.27392;-5.31608;2.54845;5.71989;-6.41308;-0.776797;-3.23454;8.70321;-3.55807;7.11437");
	thetas.push_back("4.58793;7.13304;-1.83075;-6.78129;8.83167;-1.32039;0.329568;-8.92252;-9.5371;6.86591;-5.8985;-9.57006;-3.68134;6.50645;2.09116;-6.74872;1.95191;9.20493;5.7709;-1.18245;-3.76052;-0.0805905;-3.28821;7.80767;9.28333");
	thetas.push_back("-8.34175;4.30373;9.42114;-9.77933;-9.02514;-8.61427;4.52932;3.09874;5.11444;4.24341;5.86566;2.84076;-6.96955;-1.65834;7.72404;-0.121535;6.00699;0.378564;-2.99142;9.46261;-3.5436;2.55382;-9.7749;1.57876;-6.2122;-6.28012;-9.93803;-1.61913;6.28211;-5.04363;-6.02212;8.66328;2.77746;-2.98617;1.78217;0.994329;-0.164856;-3.87362;-9.13425;-8.26568;-1.05848;-4.89868;-5.51707;-1.17581;-4.34546;-6.87765;6.99272;1.98256;1.84245");
	thetas.push_back("-5.09817;1.16209;0.367184;8.1965;-3.5337;-4.82726;-1.06796;2.69384;3.15922;-6.61944;-3.0275;-9.48815;7.30114;-0.604992;3.8909;3.07861;-3.50782;7.3737;8.2369;3.34474;-4.21126;4.69141;2.34058;-5.61196;7.52169;5.31424;-1.85031;-8.1626;0.16391;1.74774;5.87019;-4.4126;1.93261;-4.83698;-7.51058;-8.78433;3.209;-9.43518;-2.50974;7.00793;-6.18805;2.23755;6.80948;2.52721;-1.16921;2.81321;-1.09802;3.47765;-4.2661");
	thetas.push_back("2.43923;5.70015;9.88688;3.02275;8.17486;8.54831;-0.229856;-8.62969;-6.41137;6.12057;6.35916;-7.97895;-3.66088;6.21936;-2.02109;-7.19186;-7.60263;-4.84048;6.56055;-8.51637;3.47609;-1.12214;5.24523;-4.86835;4.46081;-9.38473;-0.703634;4.27703;5.47159;2.67976;6.59695;0.698314;1.40142;-9.40336;6.57861;-0.581607;7.49945;7.24438;-8.1833;7.17938;-9.405;1.59402;1.4482;-4.49671;-4.65591;4.96396;5.37454;0.186947;-0.3396");
	thetas.push_back("9.27441;-9.21422;0.80049;-6.1538;-2.53718;-9.34022;2.05498;-0.602903;7.40294;-5.19373;6.67658;-7.04217;1.33109;-6.73591;-0.729676;-8.88105;-4.56903;-9.99057;-8.61894;-3.35534;-7.62217;0.343859;3.1432;-1.58174;-6.13776;8.97064;1.55343;6.26309;1.5386;4.68775;4.68563;-8.43885;-9.68059;-7.04072;5.68094;-2.24741;-6.48807;4.15647;0.646964;5.62223;1.57296;-1.1982;-8.86554;7.46134;-8.72943;7.90731;5.68843;-0.902999;-2.58425");
	thetas.push_back("8.58629;5.9448;-1.25486;-9.73103;4.39183;-1.84271;-8.90518;-1.63695;5.29046;-3.06899;2.15293;0.514319;7.96832;-6.27809;-3.53579;5.95573;5.35262;-2.92645;-6.28654;3.2761;-1.81201;0.373288;-3.5881;-1.68302;-0.811008;-0.266029;-6.31057;-7.49943;0.706811;9.80243;-0.806856;3.58803;4.97935;-7.89114;0.86319;-1.43728;8.46096;-2.46205;6.61178;9.35735;-5.03045;2.39416;-3.85447;-5.97914;-5.77656;7.29269;-0.850632;-9.88108;-8.44667");
	thetas.push_back("1.87463;-8.71043;-7.23307;-6.27219;4.87377;-6.81969;-7.27453;-2.0821;3.38726;3.94455;0.423194;-2.41285;-1.97214;3.32209;-8.4846;7.43779;-9.9179;-3.31493;8.32662;8.55463;-0.799753;-5.11635;9.9587;-4.83008;-8.67093;8.89691;2.99908;-9.87449;7.70776;-1.36648;6.53499;7.43591;-2.62543;-5.19368;-0.503876;0.252854;-7.57995;-5.16066;-9.67022;8.43912;-7.58519;8.80289;-5.84327;-8.5185;-0.27792;-1.85402;-0.825985;2.51759;-7.39725");
	thetas.push_back("-6.57125;-5.24925;4.60772;7.71042;-1.77824;8.78496;-0.984812;-3.28689;2.66888;2.88011;-3.87734;-2.26898;2.94492;6.76441;2.65673;6.016;6.76963;3.32405;-1.57212;8.56396;-4.30207;6.90305;-0.229891;1.4997;-2.4177;-6.66749;9.50487;-9.43405;-0.667597;-5.43472;0.642314;-5.31748;-5.40926;7.39896;4.69071;5.6992;-4.37841;4.26028;-7.29498;-9.57848;-8.2786;-6.41503;-0.346052;-4.88792;7.8832;7.08577;2.91779;4.57245;8.25939");
	thetas.push_back("5.1381;-1.65107;-9.83098;-0.0653905;6.31875;3.40334;-6.67979;2.57359;-5.27523;-1.90537;-3.20606;-7.11811;5.63139;-8.94747;-5.23064;1.9738;7.10939;4.07554;8.47197;8.44775;8.95283;4.68936;-0.781111;-3.43752;-1.48103;-8.29364;8.02753;8.34944;1.99094;-4.84336;0.232446;-2.06663;-0.401174;-2.81195;-2.38799;5.5005;-6.65139;-2.22076;7.61899;-4.91153;4.31742;-7.9671;-2.46994;5.62257;-2.30491;9.62351;-3.62796;-5.48628;5.40539");
	thetas.push_back("-3.60549;6.92829;4.67105;-8.90895;7.14686;-8.13151;5.16158;-7.10366;3.25496;-5.12964;-3.37708;0.326401;-4.26154;-6.96737;2.78409;0.89416;-6.85135;6.8136;4.48673;4.3018;-0.119255;0.389419;3.61207;-6.33036;4.94701;6.41694;3.22892;8.37222;6.26611;0.960279;3.53157;-2.02502;4.02241;3.41799;6.62062;-4.89838;5.60538;3.73575;-0.172432;3.58859;-7.28322;-2.20274;9.88565;-1.55633;-1.59444;-2.07636;3.6833;-1.8371;6.54339");
	thetas.push_back("6.51112;-1.19502;-6.94223;3.57634;4.97017;-5.9761;-2.15599;-9.16231;-9.47182;8.78704;-0.0111066;3.27081;7.00883;-1.33678;1.3449;1.91716;7.66844;2.50048;1.58316;-8.34326;0.145483;-7.59485;1.05891;-5.42889;-4.42501;7.08241;-6.54086;6.02092;1.04522;-3.06047;-3.47549;-5.25578;-5.28555;0.363893;-1.96905;-8.72884;-2.23109;-6.02235;8.16643;1.19863;8.15284;-0.493018;8.4922;-8.62276;1.84692;-1.19197;1.64047;-8.15363;-8.08192");
	thetas.push_back("1.91755;0.57031;2.10132;-0.0285131;-0.622619;-4.86309;9.74353;-7.81099;0.111959;8.55856;-8.65989;1.74003;5.9503;-4.09459;8.98804;1.91434;3.91664;-3.6797;-9.28982;-0.178458;1.21211;8.89392;-7.60328;0.02312;-4.10569;-4.95549;7.43228;1.80773;-3.21262;9.33413;0.615367;9.05687;9.74165;9.34212;-5.2269;-9.49608;-8.68781;-2.10647;-2.33694;9.3741;0.0310126;-1.72194;-7.58805;0.689093;6.70165;8.36362;-8.72434;7.49076;-1.56193");
	thetas.push_back("-7.51204;-0.823087;-2.51475;9.02513;4.57758;-9.35075;-7.64178;9.83797;4.27091;9.65756;-0.567194;5.76466;6.7913;0.898507;-2.31694;-0.349971;-8.02373;-9.83887;2.5942;2.92219;2.72127;7.33707;-0.749297;0.543978;-6.51588;-5.77707;-2.21253;9.04802;0.940087;-2.24987;4.37887;3.73948;-8.76186;5.53214;-2.38393;-5.25096;6.61089;-4.68357;5.13857;-8.26848;-9.54764;9.14288;3.8747;3.75063;-3.6587;-6.72247;-3.76706;-6.75305;2.87828");
	thetas.push_back("-3.44362;-8.37315;-2.32684;-3.59562;2.16813;9.4302;-2.71302;2.56993;5.18244;-3.03001;-7.18592;-5.53541;-9.56288;3.23422;-2.84555;-9.47281;6.77543;1.963;4.21736;7.87449;1.76644;-2.14089;7.20098;-9.11844;-7.10928;2.01742;1.30237;-2.0104;-3.79426;1.90236;2.63244;-0.338643;-9.20124;2.92152;-9.05417;6.17308;6.63108;5.63971;-0.291119;4.80182;7.36492;-9.56021;-7.678;2.83581;4.41849;2.27872;-4.34813;0.200085;1.67683");
	thetas.push_back("-8.02829;-5.04328;-4.96796;-7.28349;6.36562;-3.52304;3.28668;-7.72413;4.95773;-8.89878;-7.36261;-4.33062;-2.65535;0.379512;-2.70646;0.711762;-5.22384;-2.18005;-0.159581;-9.4095;1.84711;7.40045;-1.59643;4.97499;-2.04718;-0.618592;5.45752;-8.18342;-9.81671;-2.75161;5.77327;-6.99811;-9.42334;-5.33572;-0.92005;-9.47682;-7.30254;8.91973;-1.4395;5.83761;1.89344;9.34222;7.57975;9.38975;-8.69245;-3.89319;3.3281;8.38329;-3.74042");
	thetas.push_back("3.24811;7.79775;4.78911;2.29823;-0.0975517;6.99982;5.91819;1.47525;-9.21883;4.77222;-4.03976;-5.19598;8.2506;-7.81307;3.91966;-4.73709;7.8678;-0.289141;-4.09176;3.194;-3.71773;0.761436;5.84819;-5.15361;-9.46896;-4.73664;-3.17446;5.4309;9.93625;-7.49564;2.1735;-6.59088;-8.32731;-2.19332;0.185176;-1.92891;-0.0379064;9.88457;0.630694;-2.39356;8.86614;5.8039;1.4931;8.63292;-9.13168;4.5665;5.05239;6.00703;-7.73097");
	thetas.push_back("-9.96517;-9.44034;-3.72728;9.62235;-8.71457;-8.61919;-1.65905;3.7504;-1.40397;8.27423;-4.48642;9.74356;-7.99775;-4.49769;-8.39585;-9.98884;1.63291;9.60138;-1.555;2.89973;-4.69845;7.76674;5.9591;-0.210764;-6.41779;2.52855;3.44853;-6.67522;2.7166;-1.48602;-5.61957;-4.79371;0.322187;-3.35454;3.05825;-4.67507;8.75862;-7.61614;-2.04255;-7.93674;7.22383;-4.88318;-0.684015;0.493769;7.61172;7.07617;-9.86253;-4.28772;-7.38254");
	thetas.push_back("6.82786;-6.85741;5.23535;8.49015;8.04687;-4.29646;-8.04239;-7.45117;9.74549;1.89682;1.83955;-3.77011;-8.26341;-1.23226;-7.1573;-4.74113;1.78372;9.41644;7.90542;8.51942;7.62899;-7.24416;-3.35314;-8.31391;9.09403;-2.05619;8.47162;9.32023;9.44384;-0.755925;9.80998;-9.84709;-1.6023;-6.72757;4.25592;-2.45006;5.88591;9.64672;-1.77133;-3.49198;1.50023;-7.70761;-4.9603;-6.02114;1.40445;-6.21779;-8.5167;-5.94097;4.66592");
	thetas.push_back("3.65296;3.61595;0.458265;-4.70257;-0.750051;4.45306;-6.56294;-1.21206;-2.95532;9.5611;2.08484;-3.02802;7.28937;1.24792;7.05127;7.35095;-3.08751;4.44541;5.3986;-9.25498;-4.88401;-9.9845;-4.8012;-9.28017;-0.841623;6.59641;-4.00442;-7.60408;-3.7623;-2.64057;1.2166;-3.05834;4.40851;2.43151;2.95254;-2.87853;-4.167;-8.62269;6.27022;-7.54229;6.91941;0.415605;-3.55896;1.83197;-5.07984;-8.50631;6.13173;7.55292;-0.68595");
	thetas.push_back("4.11869;-1.45455;-0.773269;-8.61921;-6.62952;6.71561;8.60096;-3.63073;2.69737;1.85578;-3.62685;3.22879;-6.83832;2.69465;-5.0591;8.86029;9.66376;-9.46779;-2.75989;-5.26153;-0.00772509;-2.3648;3.81699;-1.4178;-8.9854;4.22357;5.26035;-3.25733;7.32902;7.53408;-2.93623;-2.43136;8.8504;0.551086;4.91469;1.14314;5.10792;-9.77575;-6.18791;-3.2689;0.59146;-2.11333;0.322421;6.42821;2.98839;-4.02564;-4.50938;-0.617272;8.81198");
	thetas.push_back("9.27942;-4.23377;-5.14604;-6.94468;-3.24657;8.64881;4.15279;-1.13462;-4.59522;-8.57618;-8.01998;-5.54812;-4.58411;2.27927;6.61033;8.16392;-1.50203;1.84351;-2.85036;-2.15714;-8.4197;-5.79856;9.30458;5.86034;-2.34421;3.71646;1.51335;8.1805;9.11073;-3.90992;-1.46933;5.26284;-9.25316;0.268273;1.20017;-6.82068;9.79372;5.09134;-6.27771;2.20662;6.60209;6.39277;9.99628;-0.128975;8.48998;-4.64192;5.49544;5.15844;-4.91546");
	thetas.push_back("-8.66546;2.42085;-5.61232;5.55858;9.05742;0.077842;4.45207;-6.64359;6.34002;-5.90705;-3.12397;-3.91918;-1.66033;5.9852;-0.177177;-1.3865;-0.356463;-3.22939;1.62716;-8.7218;-2.27789;-9.9061;3.12453;-9.6429;7.95449;-7.78708;3.11289;-2.61194;-1.17622;5.52283;-5.71688;-5.90597;-1.6306;-3.94113;-7.55359;3.56074;9.65198;1.64906;7.95054;9.45355;-4.79529;6.07356;-9.12697;-5.2802;-4.91758;3.60061;-2.53448;8.94649;6.77854");
	thetas.push_back("-1.30063;5.99917;-0.734666;0.877824;-4.19077;4.34939;7.89502;7.79424;-3.83067;-6.52466;-6.59438;-3.04932;1.15015;-5.66891;-4.61138;2.44554;-9.19309;9.52041;2.71525;4.21203;-0.323387;-0.959213;9.04575;-6.61455;-5.92429;1.73975;1.01913;6.69509;8.60949;3.94327;7.11069;1.44479;-1.41255;3.12787;1.17323;4.97627;5.92795;1.3428;5.85583;-0.330756;8.76449;-0.899319;-6.8029;-6.42567;9.33378;0.133399;1.06872;-2.54131;3.63865");
	thetas.push_back("7.96794;-4.42815;0.538223;9.24927;4.65002;-3.28236;8.83888;-7.61563;1.26636;-4.88702;4.85328;-9.51003;-6.57322;-4.34483;-1.00453;-5.829;-0.962318;2.59614;-2.52006;9.16704;-7.57801;-0.569036;3.58525;4.21415;9.40411;9.77927;6.80018;2.71258;-3.39904;2.92567;-2.24627;3.98188;3.21498;2.10255;1.52645;8.60811;3.31388;7.24303;-8.4079;-9.26449;1.68747;4.80759;-1.04833;-9.2896;9.26689;1.72686;-4.15603;-4.27876;-3.58667");
	thetas.push_back("-5.4962;-0.820577;7.42664;-7.96475;1.0103;-1.93896;1.43575;-4.49668;3.43299;-6.2661;7.09671;3.79882;6.86171;6.92373;-9.82155;8.94892;-2.16686;6.22392;9.05232;-4.8257;-3.39985;-8.37512;-7.22355;9.83651;4.38217;4.42099;-1.97979;7.97117;-4.10838;6.87645;-8.90913;-4.76221;-6.80147;2.05163;-1.46779;-7.86707;-7.40964;7.43155;8.11754;-7.34222;7.58069;-0.371907;-8.30722;3.61435;-6.62122;1.26662;-6.10187;5.28451;6.69413");
	thetas.push_back("2.19394;-5.72599;2.7912;1.00557;8.1215;-1.99116;-7.71076;-4.80342;3.36375;-2.9127;6.59471;-3.62446;3.21721;4.12082;-8.69737;-5.60015;-4.53797;-1.70699;-3.89756;3.18763;-8.49435;-5.02626;-1.79095;5.89253;2.90415");
	return thetas;
}

int main(void)
{
	GodMachine *machine = new GodMachine(NeuralNetwork);
	machine->readThetas(loadThetas());
	std::cerr << "He leído las thetas bien" << std::endl;
    bool reg = false;
    std::string s = "", subs;
	double cantidad_a_vender = 0;
	double cantidad_a_comprar = 0;
	double numero_acciones = 0;
	double precio_total = 0;
	int candletimethetas = 3600;  //Hardcodear el tiempo de los candles de nuestras thetas
	int candletimesim = 0;
	int initTime = 0;
	int finishTime = 0;
	int candlesPorMuestra = 0;
	int muestrasAlmacenadas = 0;
	double highValue = 0;
	double openValue;
	double closeValue;
	double lowValue = DBL_MAX;
	double volumeValue = 0;
	int parameters = 1; // Hardcodear si usamos PCA (0) o si usamos sólo el close (1)
	int dimensions = 24; // Hardcodear cuántas dimensiones usamos en una muestra
	int actualDimensions = 0;
	std::vector<double> inputs;
	Sample sample;

    // Wait for INITIALIZE command
    while (s != "INITIALIZE") {
      nb_getline(std::cin, s);
      usleep(200000);      // Sleep for 0.2 seconds (5 times per second)
    }

    // Register into the match
    std::stringstream ss;
    srand(time(NULL));
    ss << "userCampus";
    std::cout << "REGISTER " << ss.str() << std::endl;

    // Wait for START command
    subs = "";
    do {
      nb_getline(std::cin, s);
      if (s.length() > 5) {
        subs = s.substr(0, 5);
        std::cerr << "SUBSTR: [" << subs << "]\n";
      }
      usleep(200000);      // Sleep for 0.2 seconds (5 times per second)
    } while (subs != "START");

    // Interpret START command
    ss.clear(); ss.str(s);
    unsigned mode, duration, candletime;
    double initfiat;
    ss >> s >> mode >> duration >> candletime >> initfiat;
    std::cerr << "START " << mode << " " << duration << " " << candletime << " " << initfiat << std::endl;
	double cantidad_actual = initfiat;
    // Until the end of the simulation, BUY and SELL
    while (s != "END") {
        nb_getline(std::cin, s);
        if (s != ""){
			subs = "";
			subs = s.substr(0, 4);
			if(subs == "NEXT"){
//				std::cerr << s << std::endl;

				//Almacenamos los datos del candle leído
				std::stringstream ss;
				ss.clear(); ss.str(s);
				double unixtime;
				double tmphigh,tmpopen,tmpclose,tmplow,tmpvolume;
				ss >> s >> unixtime >> tmphigh >> tmpopen >> tmpclose >> tmplow >> tmpvolume;

				//Guardamos la diferencia de tiempo entre candles del simulador
				if (initTime == 0){
					initTime = unixtime;
				}
				else if (finishTime == 0){;
					finishTime = unixtime;
				}
				else{
					candletimesim = finishTime-initTime;
					candlesPorMuestra = (int)((float)candletimethetas/(float)candletimesim);
					//Si tenemos los datos suficientes para un candle agrupado, lo creamos y predecimos el siguiente
					if(muestrasAlmacenadas == candlesPorMuestra) {
						if(parameters == 1){
							if(actualDimensions < dimensions){
								inputs.push_back(closeValue);
								actualDimensions++;
							}
						}

						if (actualDimensions == dimensions){
							std::reverse(inputs.begin(),inputs.end());
							sample.setInput(inputs);
							for (int i = 0; i < inputs.size(); i++){
								std::cerr << inputs[i] << " ";
							}
							std::cerr << std::endl;
							std::cerr << "Voy a entrar al predict" << std::endl;
							double prediction = machine->predict(sample);
							std::cerr << "Salgo del predict" << std::endl;

							inputs.clear();
							actualDimensions = 0;

							//si predict devuelve true quiere decir que va a subir
							if(prediction > 0.5){
								cantidad_a_comprar = stockToTrade(closeValue,cantidad_actual); //calculamos cuanto queremos comprar
								std::cerr << "Compro " << cantidad_a_comprar << std::endl;
								std::cout << "BUY " << cantidad_a_comprar << std::endl; //enviamos el mensaje
							}else{
								cantidad_a_vender = stockToTrade(closeValue,cantidad_actual); //calculamos la cantidad a vender
								std::cerr << "Vendo " << cantidad_a_vender << std::endl; //mandamos el mensaje sell
								std::cout << "SELL " << cantidad_a_vender << std::endl; //mandamos el mensaje sell
							}
						}

						//Reinicializamos los valores del nuevo candle agrupado
						muestrasAlmacenadas = 0;
						highValue = 0;
						lowValue = DBL_MAX;
						volumeValue = 0;
					}
					//Guardamos la información para el candle agrupado
					if(muestrasAlmacenadas == 0){
						 openValue = tmpopen;
					}
					if (tmphigh > highValue)
						highValue = tmphigh;
					if (tmplow < lowValue)
						lowValue = tmplow;
					volumeValue += tmpvolume;
					closeValue = tmpclose;

					muestrasAlmacenadas++;
				}
			}else if(subs == "SOLD"){
				std::cerr << s << std::endl; //mostramos el mensaje de sold
				std::stringstream ss;
				ss.clear(); ss.str(s);

				ss >> s >> numero_acciones >> closeValue; //fragmentamos el mensaje

				precio_total = numero_acciones * closeValue; //calculamos el precio total
				cantidad_actual = cantidad_actual + precio_total; //aumentamos nuestra cantidad_actual
			}else if(subs == "BOUG"){
				std::cerr << s << std::endl; //mostramos el mensaje de bought

				std::stringstream ss;
				ss.clear(); ss.str(s);

				ss >> s >> numero_acciones >> closeValue; //fragmentamos el mensaje

				precio_total = numero_acciones * closeValue; //calculamos el precio total
				cantidad_actual = cantidad_actual - precio_total; //lo descontamos de nuestra cantidad
			}else if(subs == "NOT_"){// no entiende el mensaje enviado,
				std::cerr << "Pinyico" << std::endl;
			}
		}
        usleep(50000);      // Sleep for 0.05 seconds (20 times per second)
    }

    return 0;
}


